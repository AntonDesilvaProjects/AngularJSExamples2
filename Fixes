/**
 * This class is the main view for the application. It is specified in app.js as the
 * "autoCreateViewport" property. That setting automatically applies the "viewport"
 * plugin to promote that instance of this class to the body element.
 *
 * TODO - Replace this content of this view to suite the needs of your application.
 */
Ext.define('Sanbox3.view.main.Main', {
    extend: 'Ext.container.Container',
    requires: [
        'Sanbox3.view.main.MainController',
        'Sanbox3.view.main.MainModel'
    ],

    xtype: 'app-main',
    
    controller: 'main',
    viewModel: {
        type: 'main'
    },

    layout: {
        type: 'vbox'
    },

    items: [
		{
			xtype : 'combo',
			fieldLabel : 'Plase Choose',
			store : 'Sandbox3.store.NameValue',
			displayField : 'name',
			valueField : 'value',
			multiSelect : true,
			delimiter : ';',
			//queryMode : 'local',
			listeners : {
				beforerender : function()
				{
					console.log('before rendering the combo box !');
				},
				afterrender : function()
				{
					console.log('after rendering the combo box !');
				},
				beforeselect : function( combobox, record, index, options )
				{
					console.log('before select');
					console.log(record);
					console.log(index);
					console.log(options);
					if( record.get('name') == 'Any' )
					{
						console.log('Any Selected !');
						combobox.clearValue();
						//combobox.setValue('Any');
						console.log('Inside: ' + combobox.getValue());
					}
				},
				select : function( combobox, records , index, options )
				{
					if(records.length == 1 && records[0].get('name') == 'Any')
					{
						return;
					}
					combobox.clearValue();
					var values = [];
					records.forEach( function( current) {
						if( current.get('name') != 'Any' )
						{
							values.push( current.get('value'));
						}
					});
					combobox.setValue(values);
				},
				change : Ext.bind(function( combo , newValue , oldValue , eOpts, myParam){
					console.log("Short Weekends: " + myParam.name );
				} ,
				this , { 'name' : 'Anton De Silva' }, true)
				
			}
		},
		{
			xtype : 'button',
			text : 'Select',
			handler : function()
			{
				console.log('button clicked !');
				var combo = this.up().down('combo');
				/*var apiResult = '2,5,1';
				var comboStore = combo.getStore();
				var apiResultSplit = apiResult.split(',');//.map(Number);
				for(var i = 0; i < apiResultSplit.length; i++)
				{
					apiResultSplit[i] = parseInt(apiResultSplit[i], 10);
				}
				//combo.setValue(apiResultSplit);
				//combo.setValue('New York');
				console.log(combo.getValue());*/
				//var s = Ext.create('Sandbox3.store.NameValue');
				//s.load();
				combo.setValue('Anton');
			}
		}
	]
});
--------------------------
// The data store containing the list of states
var states = Ext.create('Ext.data.Store', {
    fields: ['abbr', 'name'],
    data : [
        {"abbr":"1", "name":"Alabama"},
        {"abbr":"2", "name":"Alaska"},
        {"abbr":"3", "name":"Arizona"}
        //...
    ]
});

// Create the combo box, attached to the states data store
var combo = Ext.create('Ext.form.ComboBox', {
    fieldLabel: 'Choose State',
    store: states,
    queryMode: 'local',
    displayField: 'name',
    valueField: 'abbr',
    multiSelect: true,
    renderTo: Ext.getBody()
});

var button = Ext.create('Ext.button.Button', {
    text : 'Click',
    renderTo: Ext.getBody(),
    me : this,
    handler : function()
    {
        console.log(combo.getValue());
        var resCodes = "3,2";
        var arr = resCodes.split(',');
        if(isEqual(arr, combo.getValue())) alert('equal!');
        else alert('not equal!');
    },
        
});

var isEqual = function(arr1, arr2)
{
    if(arr1.length != arr2.length) return false;
    arr1.sort();
    arr2.sort();
    for(var k = 0; k < arr1.length; k++)
        if(arr1[k] != arr2[k]) return false;
    return true;
}
--------------------------------------------------JSON Parser----------------------------------------------------
import java.util.Stack;


public class Runner {
	public static void log(String c)
	{
		System.out.println(c);
	}
	public static void log(Integer c)
	{
		System.out.println(c);
	}
	public static void log(Boolean c)
	{
		System.out.println(c);
	}
	public static void log(String[] c)
	{
		for(String x : c)
		System.out.println(x);
	}
	public static void log(Node c, String tab)
	{
		 System.out.println(tab + "Name: " + c.name);
		 System.out.println(tab + "Value: " + c.value);
		 System.out.println(tab + "Children: " );
		 
		 for(Node n : c.children)
		 {
			log(n, tab + "\t");
		 }
		 System.out.println();
	}
	public static void main(String[] args)
	{
		Node root = new Node();
		root.name = "ROOT";
		
		
		String json = "{" + 
				"\"name\": \"Avengers\"," +
				"\"year\": 2012," + 
				"\"actors\": [" + 
					"\"RDJr\"," + 
					"\"CH\"," +
					"\"SJ\"," +
					"\"SLJ\"" +
				"]," + 
				"\"related\": {" + 
					"\"name\": \"MCU\"," + 
					"\"films\":[" + 
						"\"IronMan\"," +
						"\"Thor\"," + 
						"\"Captain America\"" +
					"]" + 
				"}" +
			"}";
		
		String json2 = "[" +
							"\"Anton\"," +
							"\"Desilva\"," +
						"]";
		parse(json2, root);
		
		log(root, "");
	
		
	}
	public static void parse(String json, Node root)
	{
		String rawContent = json.trim().substring(1, json.trim().length()-1);
		String[] content = selectiveRplc(rawContent).split(",");
		
		String name = null, value = null;
		String[] pair;
		
		for(String s : content)
		{
			if(s.indexOf(':') == -1)
			{
				pair = s.split(",");
				for(String x : pair)
				{
					root.children.add(new Node(x, ""));
				}
				continue;
			}
			pair = s.split(":");
			name = pair[0];
			value = pair[1];
			Node current = new Node();
			current.name = name;

			if(hasValue(value))
			{
				current.value = value;
				root.children.add(current);
			}
			else
			{
				root.children.add(current);
				parse( selectiveDerplc(value), current );
			}
		}
	}
	
	public static boolean hasValue(String s)
	{
		if(s == null)
			return false;
		if(s.trim().charAt(0) == '[' || s.trim().charAt(0) == '{' )
		{
			return false;
		}
		return true;
	}
	public static String selectiveRplc(String jsonContent)
	{
		boolean rplc = false;
		int count  = 0;
		StringBuilder sb = new StringBuilder();
		
		for(int i = 0; i < jsonContent.length(); i++)
		{
			if(jsonContent.charAt(i) == '{' || jsonContent.charAt(i) == '[' )
			{
				count++;
				rplc = true;
			}
			else if(jsonContent.charAt(i) == '}' || jsonContent.charAt(i) == ']' )
			{
				count--;
				if(count == 0)
					rplc = false;
			}
			
			if( rplc && jsonContent.charAt(i) == ',')
				sb.append("`");
			else if( rplc && jsonContent.charAt(i) == ':')
				sb.append("|");
			else
				sb.append(jsonContent.charAt(i));
		}
		return sb.toString();
	}
	public static String selectiveDerplc(String jsonContent)
	{
		return jsonContent.replace('`', ',').replace('|', ':');
	}
}
